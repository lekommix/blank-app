import streamlit as st
from openai import OpenAI
import pdfplumber
from docx import Document
import os
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
OPENAI_API_KEY = "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"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á
PROJECT_ID = "proj_3LFcRXiyy2eIhtVUFDx06BmA"  # –¢–≤–æ–π ID –ø—Ä–æ–µ–∫—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY, project=PROJECT_ID)

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ ---
def extract_text_from_pdf(path):
    with pdfplumber.open(path) as pdf:
        return '\n'.join([page.extract_text() or '' for page in pdf.pages]).strip()

def extract_text_from_docx(path):
    doc = Document(path)
    return '\n'.join([p.text for p in doc.paragraphs]).strip()

def read_file(file):
    ext = os.path.splitext(file.name)[-1].lower()
    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        tmp.write(file.read())
        tmp_path = tmp.name

    if ext == '.pdf':
        return extract_text_from_pdf(tmp_path)
    elif ext == '.docx':
        return extract_text_from_docx(tmp_path)
    elif ext == '.txt':
        with open(tmp_path, 'r', encoding='utf-8') as f:
            return f.read()
    else:
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ë–∏—Ç—Ä–æ–Ω–∏–∫—Å", layout="centered")
st.title("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ë–∏—Ç—Ä–æ–Ω–∏–∫—Å")
st.markdown("–ó–∞–≥—Ä—É–∑–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ —Ä–∞–∑–±–æ—Ä:")

uploaded_file = st.file_uploader("üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, DOCX, TXT)", type=["pdf", "docx", "txt"])

if uploaded_file and st.button("üöÄ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª..."):
        file_text = read_file(uploaded_file)
        
        if not file_text:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.")
        else:
            try:
                # GPT-4o, –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ system message
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": (
                                "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ë–∏—Ç—Ä–æ–Ω–∏–∫—Å. "
                                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. "
                                "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑, –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ JSON."
                            )
                        },
                        {
                            "role": "user",
                            "content": file_text
                        }
                    ]
                )
                result = response.choices[0].message.content.strip()
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")
                st.text_area("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:", result, height=400)
                st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ .txt", result, file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt")

            except Exception as e:
                st.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
