import os
import asyncio
import time
from telegram import Update, Document
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
load_dotenv()

# –ß–∏—Ç–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ª–∏–±–æ .env, –ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "sk-...")        # –≤–∞—à API‚Äë–∫–ª—é—á
ASSISTANT_ID = os.getenv("ASSISTANT_ID", "asst_...")          # ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "...")
VECTOR_STORE_ID = os.getenv("VECTOR_STORE_ID", "vs_...")      # ID –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(
    api_key=OPENAI_API_KEY,
    default_headers={"OpenAI-Beta": "assistants=v2"},
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ (thread_id) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_threads: dict[int, str] = {}

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("downloads", exist_ok=True)

def attach_vector_store_to_assistant() -> None:
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–∫–ª—é—á–∞–µ—Ç web-search –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    try:
        client.beta.assistants.update(
            assistant_id=ASSISTANT_ID,
            tools=[
                {"type": "file_search"},
                {"type": "web_search"},
            ],
            tool_resources={
                "file_search": {"vector_store_ids": [VECTOR_STORE_ID]},
                # –¥–ª—è web_search —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            },
        )
        print(f"üîó –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {ASSISTANT_ID} –æ–±–Ω–æ–≤–ª—ë–Ω: –ø–æ–¥–∫–ª—é—á–µ–Ω—ã file_search –∏ web_search.")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")

async def reset_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if user_threads.pop(user_id, None):
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."""
    user_id = update.effective_user.id
    thread_id = user_threads.get(user_id)
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not thread_id:
        thread = client.beta.threads.create()
        thread_id = thread.id
        user_threads[user_id] = thread_id

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
    user_text = update.message.text
    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_text,
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await run_assistant_and_respond(update, thread_id)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ OpenAI –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É."""
    document: Document = update.message.document
    user_id = update.effective_user.id
    thread_id = user_threads.get(user_id)
    if not thread_id:
        thread = client.beta.threads.create()
        thread_id = thread.id
        user_threads[user_id] = thread_id

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    file_path = f"downloads/{document.file_unique_id}_{document.file_name}"
    tg_file = await context.bot.get_file(document.file_id)
    await tg_file.download_to_drive(file_path)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ OpenAI
        with open(file_path, "rb") as f:
            uploaded = client.files.create(file=f, purpose="assistants")

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
        client.vector_stores.files.create(
            vector_store_id=VECTOR_STORE_ID,
            file_id=uploaded.id,
        )

        await update.message.reply_text("‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

async def run_assistant_and_respond(update: Update, thread_id: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
    # –°–æ–∑–¥–∞—ë–º run –±–µ–∑ tool_resources: –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ web-search —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID,
    )

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    timeout = 60  # —Å–µ–∫—É–Ω–¥
    start_time = time.time()
    while time.time() - start_time < timeout:
        run_status = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id,
        )
        if run_status.status == "completed":
            break
        elif run_status.status == "failed":
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        await asyncio.sleep(1)
    else:
        await update.message.reply_text("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    messages = client.beta.threads.messages.list(
        thread_id=thread_id,
        order="desc",
        limit=10,
    )
    for msg in messages.data:
        if msg.role == "assistant":
            text_parts = [
                part.text.value
                for part in msg.content
                if part.type == "text"
            ]
            if text_parts:
                await update.message.reply_text("\n".join(text_parts))
                return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç
    await update.message.reply_text("ü§∑ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")

def run_telegram_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã."""
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º web-search
    attach_vector_store_to_assistant()

    # –°—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram‚Äë–±–æ—Ç–∞
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞
    app.add_handler(CommandHandler("reset", reset_dialog))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã.")
    app.run_polling()

if __name__ == "__main__":
    run_telegram_bot()
